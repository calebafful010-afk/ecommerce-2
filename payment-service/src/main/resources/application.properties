# spring config
spring.application.name=product-service

spring.main.allow-bean-definition-overriding=true

# circuit breaker
## closed -> open configurations
# - interval of successive calls to determine if the circuit changes from closed to open (closed -> open)
resilience4j.circuitbreaker.instances.paymentCircuitBreaker.sliding-window-size=10
# - in count-based the last sliding-window-size calls are recorded and aggregated. Another option is "time-based"
resilience4j.circuitbreaker.instances.paymentCircuitBreaker.sliding-window-type=count-based
# - minimum number of calls required (per sliding-window-size) before the circuit can calculate the error rate or slow call rate
resilience4j.circuitbreaker.instances.paymentCircuitBreaker.minimum-number-of-calls=5
# - if (at least) 60% of 5 calls (e.g., which means 3 calls) are slower than 3s then open the circuit (closed -> open)
resilience4j.circuitbreaker.instances.paymentCircuitBreaker.slow-call-rate-threshold=60
resilience4j.circuitbreaker.instances.paymentCircuitBreaker.slow-call-duration-threshold=3s
# - if (at least) 60% of 5 calls (e.g., which means 3 calls) fail then open the circuit (closed -> open)
resilience4j.circuitbreaker.instances.paymentCircuitBreaker.failure-rate-threshold=60
## open -> half-open configurations
# - duration to wait in open state before the circuit moves to half-open (open -> half-open)
resilience4j.circuitbreaker.instances.paymentCircuitBreaker.wait-duration-in-open-state=10s
## half-open -> closed configurations
# - number of permitted calls in half-open
resilience4j.circuitbreaker.instances.paymentCircuitBreaker.permitted-number-of-calls-in-half-open-state=3

# kafka consumer
spring.kafka.consumer.group-id=ecommerce_group_id
spring.kafka.consumer.key-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer

# kafka producer
spring.kafka.producer.group-id=ecommerce_group_id
spring.kafka.producer.key-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# kafka properties
spring.kafka.properties.specific.avro.reader=true
spring.kafka.properties.auto.register.schemas=true
spring.kafka.properties.schema.registry.url=http://localhost:18081
spring.kafka.auto.offset.reset=earliest
spring.kafka.bootstrap-servers=localhost:19092
